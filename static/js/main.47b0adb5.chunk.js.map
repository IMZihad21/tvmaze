{"version":3,"sources":["components/Header/Header.tsx","components/Shows/ShortShows/ShortShows.tsx","components/Home/Home.tsx","components/Shows/DetailedShows/DetailedShows.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","id","src","alt","ShortShows","show","image","original","name","score","toFixed","to","Home","useState","shows","setShows","useEffect","fetch","then","res","json","data","catch","err","console","log","map","e","DetailedShows","showID","useParams","setShow","bookingInfo","setBookingInfo","showForm","setShowForm","booked","setBooked","useForm","register","handleSubmit","storedData","JSON","parse","localStorage","getItem","dangerouslySetInnerHTML","__html","summary","type","premiered","customerName","className","onClick","onSubmit","customerEmail","setItem","stringify","alert","htmlFor","defaultValue","readOnly","seatQuantity","min","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.47b0adb5.chunk.js","sourcesContent":["import './Header.css'\n\nconst Header = () => {\n    return (\n        <div id='headerlogo-container'>\n            <img id=\"headerlogo\" src=\"https://static.tvmaze.com/images/tvm-header-logo.png\" alt=\"\" />\n        </div>\n    );\n};\n\nexport default Header;","import { Link } from \"react-router-dom\";\nimport { Shows } from \"../../../interfaces/Show\";\nimport './ShortShows.css'\n\ninterface iProps {\n    show: Shows\n}\n\nconst ShortShows = ({ show }: iProps) => {\n    return (\n        <div id='shortShow-container'>\n            <div id='shortShowImages-container'>\n                <img src={show.show.image.original} alt=\"\" />\n            </div>\n            <div id='shortShowInfo-container'>\n                <h1>{show.show.name}</h1>\n                <p>Score <span>{show.score.toFixed(2)}</span></p>\n                <Link id='shortShowInfo-detailsbtn' to={`shows/${show.show.id}`}>Details</Link>\n            </div>\n        </div>\n    );\n};\n\nexport default ShortShows;","import { useEffect, useState } from \"react\";\nimport { Shows } from \"../../interfaces/Show\";\nimport ShortShows from \"../Shows/ShortShows/ShortShows\";\nimport './Home.css'\n\nconst Home = () => {\n    const [ shows, setShows ] = useState<Array<Shows>>();\n    useEffect(() => {\n        fetch('https://api.tvmaze.com/search/shows?q=all')\n            .then(res => res.json())\n            .then(data => setShows(data))\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    return (\n        <div id='shows-container'>\n            {\n                shows?.map(e => <ShortShows key={e.score} show={e} />)\n            }\n        </div>\n    );\n};\n\nexport default Home;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Show } from \"../../../interfaces/Show\";\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport './DetailedShows.css'\nimport { Link } from \"react-router-dom\";\n\ninterface FormValues {\n    showName: string;\n    customerName: string;\n    customerEmail: string;\n    seatQuantity: number;\n}\n\nconst DetailedShows = () => {\n    const { showID } = useParams();\n    const [ show, setShow ] = useState<Show>();\n    const [ bookingInfo, setBookingInfo ] = useState<FormValues>();\n    const [ showForm, setShowForm ] = useState<Boolean>(false);\n    const [ booked, setBooked ] = useState<Boolean>(false);\n    const { register, handleSubmit } = useForm<FormValues>();\n    const onSubmit: SubmitHandler<FormValues> = data => {\n        if (data.customerName === '') {\n            alert('Please provide your name')\n            return\n        };\n        if (data.customerEmail === '') {\n            alert('Please Provide your Email')\n            return\n        };\n        setBookingInfo(data)\n        localStorage.setItem(show?.name!, JSON.stringify(data))\n        setBooked(true);\n    };\n    const handleChangeBooking = () => {\n        setBooked(false);\n        setShowForm(true);\n    };\n\n    useEffect(() => {\n        fetch(`https://api.tvmaze.com/shows/${showID}`)\n            .then(res => res.json())\n            .then(data => {\n                setShow(data);\n                const storedData: FormValues = JSON.parse(localStorage.getItem(data.name)!);\n                if (storedData) {\n                    setBookingInfo(storedData)\n                    setBooked(true)\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [ showID ]);\n\n    if (!show?.name) {\n        return (\n            <div>\n                <h1 id='loadingData'>Please Wait a moment!</h1>\n            </div>\n        )\n    }\n\n    return (\n        <div id='detailedShow-container'>\n            <div id='detailedShowImage-container'>\n                <img src={show?.image.original} alt=\"\" />\n            </div>\n            <div id='detailedShowInfo-container'>\n                <Link id='detailedShowInfo-homebtn' to={`/`}>Back to List</Link>\n                <h1>{show?.name}</h1>\n                <div dangerouslySetInnerHTML={{ __html: show?.summary! }} />\n                <p>This {show?.type} show was Premiered On <span>{show?.premiered}</span></p>\n                <div id='bookingManagement'>\n                    {\n                        booked ?\n                            (<div>\n                                <p>This show is already booked!</p>\n                                <p>Booked by <span>{bookingInfo?.customerName}</span></p>\n                                <button className='detailedShowInfo-bookbtn' onClick={handleChangeBooking}>Change booking?</button>\n                            </div>) :\n                            (<div>\n                                {\n                                    !showForm && <button className='detailedShowInfo-bookbtn' onClick={() => setShowForm(true)}>Get ticket</button>\n                                }\n                                {\n                                    showForm && <form id='bookingForm' onSubmit={handleSubmit(onSubmit)}>\n                                        <label htmlFor=\"showName\">Name of the Show</label>\n                                        <input id='showName' type='text' defaultValue={show?.name} readOnly {...register(\"showName\")} />\n                                        <label htmlFor=\"customerName\">Enter your Name</label>\n                                        <input id='customerName' type='text' defaultValue={bookingInfo?.customerName} {...register(\"customerName\")} />\n                                        <label htmlFor=\"customerEmail\">Enter your Email</label>\n                                        <input id='customerEmail' type=\"email\" defaultValue={bookingInfo?.customerEmail} {...register(\"customerEmail\")} />\n                                        <label htmlFor=\"seatQuantity\">How many seats do you want to book?</label>\n                                        <input id='seatQuantity' type=\"number\" defaultValue={bookingInfo?.seatQuantity ? bookingInfo?.seatQuantity : 1} min={1} {...register(\"seatQuantity\")} />\n\n                                        <button className='detailedShowInfo-bookbtn' type=\"submit\">Book Now!</button>\n                                    </form>\n                                }\n                            </div>)\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DetailedShows;","import { Routes, Route } from 'react-router';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\nimport DetailedShows from './components/Shows/DetailedShows/DetailedShows';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/shows/:showID\" element={<DetailedShows />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/tvmaze\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}